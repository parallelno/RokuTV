' COLLISION API /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function CreateCollisionEngine() as object
    obj = {
        id                      : 0 ' id for next created obj
        active                  : true
        collisionGroups         : {} ' {groupName : {id, obj}}
        COLLISION_TYPE_BOX      : 0
        COLLISION_TYPE_CIRCLE   : 1
        
        AddCollision    : AddCollision
        Update          : CollisionEngineUpdate
    }
    return obj
end function

function CollisionEngineUpdate()
    for each collisionGroupName in collisionGroups
        collisionGroup = collisionGroups[collisionGroupName]
        for each collisionID in collisionGroup
            collision = collisionGroup[collisionID]
            collision.collidingObjects = {}
            collision.collidedObjObects = {}
            collidingObjects = m.collisionGroups.Lookup(collision.group)
            if (collidingObjects <> invalid) collision.collidingObjects.Append(collidingObjects)
        end for
    end for
    
    for each collisionGroupName in collisionGroups
        collisionGroup = collisionGroups[collisionGroupName]
        for each collisionID in collisionGroup
            collisionGroup[collisionID].Update()
        end for
    end for
end function

function AddCollision(_collisionType as integer, _group as String, _collidingGroupList as object, _x=0 as float, _y=0 as float, _scaleX=1 as float, _scaleY=1 as float) as void
    obj = {} 'CreateCollisionBox(m.id, _collisionType, _group, _collidingGroupList, m, _x, _y, _scaleX, _scaleY)
    group = m.collisionGroups.Lookup(_group)
    idName = m.id.ToStr()
    if (group = invalid)
        newGroup = {idName : obj}
        m.collisionGroups.AddReplace(_group, newGroup)
    else
        group.AddReplace(idName, obj)
        m.collisionGroups.AddReplace(_group, group)
    end if
    
    m.id +=1
end function

function CreateCollision(_id as integer, _collisionType as integer, _group as String, _collidingGroupList as object, _collisionEngine as object, _x as float, _y as float, _scaleX=1 as float, _scaleY=1 as float) as object
    obj = {
        id : _id
        active  : true
        collisionType   : _collisionType
        group   : _group
        collidingGroupList  : _collidingGroupList
        collisionEngine : _collisionEngine
        x       : _x
        y       : _y        
        scaleX  : _scaleX
        scaleY  : _scaleY
        speedX  : 0
        speedY  : 0
        collidingObjects    : []
        collidedObjObects   : []
        
        Update  : CollisionUpdate
        Destroy : CollisionDestroy
    }
    return obj
end function

function CollisionDestroy()
    group = m.collisionEngine.collisionGroups.Lookup(m.group)
    group.Delete(m.id.ToStr())
    if (group.Count() <> 0) 
        m.collisionEngine.collisionGroups.AddReplace(group)
    else
        m.collisionEngine.collisionGroups.Delete(m.group)
    end if
end function

function CollisionUpdate() as void
    ' check collision with theSameCollisionGroupList (it need to be updated each AddCollisionObj call)
    ' if it is, remove object from list in collided and add collided object to collided list
    ' finaly we will have list only with collided objects
    
end function

function CollisionBoxCheck(player1 as object, player2 as object) as boolean
    if ((player1 = invalid) OR (player2 = invalid)) return false
    
    dx = Abs(player1.x - player2.x)
    dy = Abs(player1.y - player2.y)
    bx = player1.width + player2.width
    by = player1.height + player2.height
    
    if ( (dx < bx) AND (dy < by) ) return true
    return false
end function

function CollisionBoxAndSphereCheck(_box as object, _sphere as object) as boolean
    if ((_box = invalid) OR (_sphere = invalid)) return false
    
    BSdistance = Distance(_box, _sphere) + MinF(_box.width, _box.height)    
    if (BSdistance < _sphere.radius) return true
    return false
end function
